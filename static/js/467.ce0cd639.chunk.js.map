{"version":3,"file":"static/js/467.ce0cd639.chunk.js","mappings":"sKACA,MAAwB,yBAAxB,EAAwD,wBAAxD,EAA4F,6B,SCG7E,SAASA,EAAT,GAAqE,IAAD,IAA/CC,MAASC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAChE,OACC,iCACC,gBACCC,QAAQ,OACRC,UAAWC,EACXC,IAAG,0CAAqCL,GACxCM,IAAKP,KAGN,eAAII,UAAWC,EAAf,SAA2BL,IAC1BE,IAAgB,cAAGE,UAAWC,EAAd,SAAyB,IAAIG,KAAKN,GAAcO,kBAGnE,C,4HCjBD,EAAwB,sBAAxB,EAAwD,wB,SCMzC,SAASC,IAAU,IAAD,EAChC,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4CC,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAK,UAAGL,EAAaM,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MAajB,OANAC,EAAAA,EAAAA,YAAU,WACT,KAAIJ,EAAMK,OAAOC,OAAS,GAEnB,OAAOP,EAAkB,KAD/BQ,EAAAA,EAAAA,IAAaP,GAAOQ,KAAKT,EAE1B,GAAE,CAACC,KAGH,iCACC,kBACCS,KAAK,OACLC,MAAOV,EACPW,YAAY,0BACZC,aAAa,MACbC,WAAS,EACTC,YAAY,MACZ3B,UAAWC,EACX2B,SAAU,mBArBc,SAAAf,GAC1B,IAAMgB,EAAoC,KAAjBhB,EAAMK,OAAgB,CAAEL,MAAAA,GAAU,CAAC,EAC5DJ,EAAgBoB,EAChB,CAkB4BC,CAAhB,EAAGC,OAAuCR,MAA1C,IAGVZ,IACA,gBAAKX,UAAWC,EAAhB,SACEU,EAAeqB,KACf,SAAArC,GAAK,OACJA,EAAME,cACL,SAAC,KAAD,CAAqBoC,GAAE,UAAKtC,EAAMuC,IAAMC,MAAO,CAAEC,KAAMrB,GAAvD,UACC,SAACrB,EAAA,EAAD,CAAWC,MAAOA,KADRA,EAAMuC,GAFd,QAWV,C,wMChDDG,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACC,6NAEM,IAAMC,EAAmB,mCAAG,6GAEVD,EAAAA,EAAAA,IAAA,sBAFU,cAE3BE,EAF2B,yBAI1BA,EAASC,KAAKC,SAJY,gCAMjCC,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANS,yDAAH,qDAUnBC,EAAc,mCAAG,WAAMV,GAAN,gGAERG,EAAAA,EAAAA,IAAA,gBAAmBH,IAFX,cAEtBvC,EAFsB,yBAIrBA,EAAM6C,MAJe,gCAM5BE,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANI,yDAAH,sDAUdE,EAAa,mCAAG,WAAMX,GAAN,gGAERG,EAAAA,EAAAA,IAAA,gBAAmBH,EAAnB,aAFQ,cAErBY,EAFqB,yBAIpBA,EAAKN,KAAKM,MAJU,gCAM3BJ,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANG,yDAAH,sDAUbI,EAAgB,mCAAG,WAAMb,GAAN,gGAERG,EAAAA,EAAAA,IAAA,gBAAmBH,EAAnB,aAFQ,cAExBc,EAFwB,yBAIvBA,EAAQR,KAAKC,SAJU,gCAM9BC,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANM,yDAAH,sDAUhBvB,EAAY,mCAAG,WAAMP,GAAN,gGAEJwB,EAAAA,EAAAA,IAAA,6BAAgCxB,IAF5B,cAEpB4B,EAFoB,yBAInBA,EAAQD,KAAKC,SAJM,gCAM1BC,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANE,yDAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieItem/MovieItem.module.scss?bf85","components/MovieItem/MovieItem.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.scss?c7a6","pages/Movies/Movies.jsx","utils/fetchMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MovieItem_title__5J-tB\",\"year\":\"MovieItem_year__2q2bS\",\"posterImg\":\"MovieItem_posterImg__arUvC\"};","import PropTypes from \"prop-types\";\n\nimport css from \"./MovieItem.module.scss\";\n\nexport default function MovieItem({ movie: { title, poster_path, release_date } }) {\n\treturn (\n\t\t<>\n\t\t\t<img\n\t\t\t\tloading=\"lazy\"\n\t\t\t\tclassName={css.posterImg}\n\t\t\t\tsrc={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n\t\t\t\talt={title}\n\t\t\t/>\n\n\t\t\t<h3 className={css.title}>{title}</h3>\n\t\t\t{release_date && <p className={css.year}>{new Date(release_date).getFullYear()}</p>}\n\t\t</>\n\t);\n}\n\nMovieItem.propTypes = {\n\ttitle: PropTypes.string,\n\tposter_path: PropTypes.string,\n\trelease_date: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Movies_input__cOyYs\",\"wrapper\":\"Movies_wrapper__fbhRc\"};","import { useState, useEffect } from \"react\";\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\n\nimport MovieItem from \"components/MovieItem/MovieItem\";\nimport { fetchByQuery } from \"utils/fetchMovies\";\nimport css from \"./Movies.module.scss\";\n\nexport default function Movies() {\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [searchedMovies, setSearchedMovies] = useState(null);\n\tconst query = searchParams.get(\"query\") ?? \"\";\n\tconst location = useLocation();\n\n\tconst updateSearchParams = query => {\n\t\tconst nextSearchParams = query.trim() !== \"\" ? { query } : {};\n\t\tsetSearchParams(nextSearchParams);\n\t};\n\n\tuseEffect(() => {\n\t\tif (query.trim().length > 1) {\n\t\t\tfetchByQuery(query).then(setSearchedMovies);\n\t\t} else return setSearchedMovies([]);\n\t}, [query]);\n\n\treturn (\n\t\t<>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={query}\n\t\t\t\tplaceholder=\"Type a name of movie...\"\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\tautoFocus\n\t\t\t\tautoCorrect=\"off\"\n\t\t\t\tclassName={css.input}\n\t\t\t\tonChange={({ target }) => updateSearchParams(target.value)}\n\t\t\t/>\n\n\t\t\t{searchedMovies && (\n\t\t\t\t<div className={css.wrapper}>\n\t\t\t\t\t{searchedMovies.map(\n\t\t\t\t\t\tmovie =>\n\t\t\t\t\t\t\tmovie.poster_path && (\n\t\t\t\t\t\t\t\t<Link key={movie.id} to={`${movie.id}`} state={{ from: location }}>\n\t\t\t\t\t\t\t\t\t<MovieItem movie={movie} />\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t),\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","import axios from \"axios\";\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\naxios.defaults.headers.common[\"Authorization\"] =\n\t\"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkYmI4NjA0YTQxYTY4ZTc5YTFlOWVlZmM3Mjg0MmVjMSIsInN1YiI6IjY0NzBlMjY4MTNhMzIwMDBkY2Y5MGEzYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RsXnr-598oJBtRU8ad6qDSzA1gOYtXAbicSLwSyV3Kk\";\n\nexport const fetchTrendingMovies = async () => {\n\ttry {\n\t\tconst trending = await axios.get(`trending/movie/day`);\n\n\t\treturn trending.data.results;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n\nexport const fetchMovieById = async id => {\n\ttry {\n\t\tconst movie = await axios.get(`movie/${id}`);\n\n\t\treturn movie.data;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n\nexport const fetchCastById = async id => {\n\ttry {\n\t\tconst cast = await axios.get(`movie/${id}/credits`);\n\n\t\treturn cast.data.cast;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n\nexport const fetchReviewsById = async id => {\n\ttry {\n\t\tconst reviews = await axios.get(`movie/${id}/reviews`);\n\n\t\treturn reviews.data.results;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n\nexport const fetchByQuery = async query => {\n\ttry {\n\t\tconst results = await axios.get(`search/movie?query=${query}`);\n\n\t\treturn results.data.results;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n"],"names":["MovieItem","movie","title","poster_path","release_date","loading","className","css","src","alt","Date","getFullYear","Movies","useSearchParams","searchParams","setSearchParams","useState","searchedMovies","setSearchedMovies","query","get","location","useLocation","useEffect","trim","length","fetchByQuery","then","type","value","placeholder","autoComplete","autoFocus","autoCorrect","onChange","nextSearchParams","updateSearchParams","target","map","to","id","state","from","axios","fetchTrendingMovies","trending","data","results","Notify","message","fetchMovieById","fetchCastById","cast","fetchReviewsById","reviews"],"sourceRoot":""}