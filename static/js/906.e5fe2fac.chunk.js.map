{"version":3,"file":"static/js/906.e5fe2fac.chunk.js","mappings":"2NACA,GAAgB,QAAU,uB,kBCKX,SAASA,IACvB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAOA,OALAC,EAAAA,EAAAA,YAAU,WACJF,IACJG,EAAAA,EAAAA,IAAcN,GAASO,MAAK,SAAAC,GAAG,OAAIJ,GAAQ,OAAII,GAAhB,GAEhC,GAAE,CAACR,EAASG,IACF,OAAJA,QAAI,IAAJA,GAAAA,EAAMM,QACZ,eAAIC,UAAWC,EAAAA,QAAf,gBACER,QADF,IACEA,OADF,EACEA,EAAMS,KACN,SAAAC,GAAM,OACLA,EAAOC,eACN,2BACC,gBACCC,QAAQ,OACRL,UAAWC,EAAAA,IACXK,IAAKH,EAAOI,KACZC,IAAG,0CAAqCL,EAAOC,iBAGhD,wBAAKD,EAAOI,QACZ,uCAAeJ,EAAOM,eATdN,EAAOO,QAFZ,OAiBR,+DAED,C,wMClCDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACC,6NAEM,IAAMC,EAAmB,mCAAG,6GAEVD,EAAAA,EAAAA,IAAA,sBAFU,cAE3BE,EAF2B,yBAI1BA,EAASC,KAAKC,SAJY,gCAMjCC,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANS,yDAAH,qDAUnBC,EAAc,mCAAG,WAAMC,GAAN,gGAERR,EAAAA,EAAAA,IAAA,gBAAmBQ,IAFX,cAEtBC,EAFsB,yBAIrBA,EAAMN,MAJe,gCAM5BE,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANI,yDAAH,sDAUdrB,EAAa,mCAAG,WAAMuB,GAAN,gGAERR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,aAFQ,cAErB1B,EAFqB,yBAIpBA,EAAKqB,KAAKrB,MAJU,gCAM3BuB,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANG,yDAAH,sDAUbI,EAAgB,mCAAG,WAAMF,GAAN,gGAERR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,aAFQ,cAExBG,EAFwB,yBAIvBA,EAAQR,KAAKC,SAJU,gCAM9BC,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANM,yDAAH,sDAUhBM,EAAY,mCAAG,WAAMC,GAAN,gGAEJb,EAAAA,EAAAA,IAAA,6BAAgCa,IAF5B,cAEpBT,EAFoB,yBAInBA,EAAQD,KAAKC,SAJM,gCAM1BC,EAAAA,OAAAA,QAAA,UAAkB,KAAMC,UANE,yDAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.scss?0e19","components/Cast/Cast.jsx","utils/fetchMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Cast_wrapper__0vlTg\"};","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport css from \"./Cast.module.scss\";\nimport { fetchCastById } from \"../../utils/fetchMovies\";\n\nexport default function Cast() {\n\tconst { movieId } = useParams();\n\tconst [cast, setCast] = useState(null);\n\n\tuseEffect(() => {\n\t\tif (!cast) {\n\t\t\tfetchCastById(movieId).then(rev => setCast([...rev]));\n\t\t}\n\t}, [movieId, cast]);\n\treturn cast?.length ? (\n\t\t<ul className={css.wrapper}>\n\t\t\t{cast?.map(\n\t\t\t\tperson =>\n\t\t\t\t\tperson.profile_path && (\n\t\t\t\t\t\t<li key={person.cast_id}>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\tclassName={css.img}\n\t\t\t\t\t\t\t\talt={person.name}\n\t\t\t\t\t\t\t\tsrc={`https://image.tmdb.org/t/p/w500/${person.profile_path}`}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<h3>{person.name}</h3>\n\t\t\t\t\t\t\t<h4>Character:{person.character}</h4>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t),\n\t\t\t)}\n\t\t</ul>\n\t) : (\n\t\t<p>We don't have information about cast</p>\n\t);\n}\n","import axios from \"axios\";\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\naxios.defaults.headers.common[\"Authorization\"] =\n\t\"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkYmI4NjA0YTQxYTY4ZTc5YTFlOWVlZmM3Mjg0MmVjMSIsInN1YiI6IjY0NzBlMjY4MTNhMzIwMDBkY2Y5MGEzYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RsXnr-598oJBtRU8ad6qDSzA1gOYtXAbicSLwSyV3Kk\";\n\nexport const fetchTrendingMovies = async () => {\n\ttry {\n\t\tconst trending = await axios.get(`trending/movie/day`);\n\n\t\treturn trending.data.results;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n\nexport const fetchMovieById = async id => {\n\ttry {\n\t\tconst movie = await axios.get(`movie/${id}`);\n\n\t\treturn movie.data;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n\nexport const fetchCastById = async id => {\n\ttry {\n\t\tconst cast = await axios.get(`movie/${id}/credits`);\n\n\t\treturn cast.data.cast;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n\nexport const fetchReviewsById = async id => {\n\ttry {\n\t\tconst reviews = await axios.get(`movie/${id}/reviews`);\n\n\t\treturn reviews.data.results;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n\nexport const fetchByQuery = async query => {\n\ttry {\n\t\tconst results = await axios.get(`search/movie?query=${query}`);\n\n\t\treturn results.data.results;\n\t} catch (error) {\n\t\tNotify.failure(`${error.message}`);\n\t}\n};\n"],"names":["Cast","movieId","useParams","useState","cast","setCast","useEffect","fetchCastById","then","rev","length","className","css","map","person","profile_path","loading","alt","name","src","character","cast_id","axios","fetchTrendingMovies","trending","data","results","Notify","message","fetchMovieById","id","movie","fetchReviewsById","reviews","fetchByQuery","query"],"sourceRoot":""}